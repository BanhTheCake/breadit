// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TYPE_VOTE {
  UP
  DOWN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique

  image    String?
  accounts Account[]
  sessions Session[]

  subreddits    Subreddit[]
  subscriptions Subscription[]
  posts         Post[]
  votes         Vote[]
  comments      Comment[]
  commentVotes  CommentVote[]
}

model Subreddit {
  id            String         @id @default(cuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  subscriptions Subscription[]
  posts         Post[]

  @@index([name])
}

model Subscription {
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  votes   Vote[]
  comment Comment[]
}

model Vote {
  User   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Post   Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   TYPE_VOTE

  @@id([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  Post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  replyTo   Comment?  @relation("replyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[] @relation("replyTo")

  commentId String?

  commentVote CommentVote[]
}

model CommentVote {
  Comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      TYPE_VOTE

  @@id([userId, commentId])
}
